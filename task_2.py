"""
üìå Task 2: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∞–≥—Ä–∞–º–º
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_anagram(word1: str, word2: str) -> bool, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —Å–ª–æ–≤–∞ –∏ 
–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–Ω–∏ —è–≤–ª—è—é—Ç—Å—è –∞–Ω–∞–≥—Ä–∞–º–º–∞–º–∏, –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

üîπ –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã:
print(is_anagram("listen", "silent"))
print(is_anagram("hello", "world"))

–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
True
False
"""

def is_anagram(word1, word2):
    # TODO: –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –∑–¥–µ—Å—å
    pass

# –¢–µ—Å—Ç—ã
assert is_anagram("listen", "silent") == True
assert is_anagram("hello", "world") == False
assert is_anagram("evil", "vile") == True
assert is_anagram("python", "typhon") == True
assert is_anagram("test", "taste") == False
